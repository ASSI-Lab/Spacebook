{"ast":null,"code":"export * from './types.js';\nexport * from './enums.js'; // DOM Utils\n\nimport getCompositeRect from \"./dom-utils/getCompositeRect.js\";\nimport getLayoutRect from \"./dom-utils/getLayoutRect.js\";\nimport listScrollParents from \"./dom-utils/listScrollParents.js\";\nimport addClientRectMargins from \"./dom-utils/addClientRectMargins.js\";\nimport getCommonOffsetParent from \"./dom-utils/getCommonOffsetParent.js\";\nimport unwrapVirtualElement from \"./dom-utils/unwrapVirtualElement.js\"; // Pure Utils\n\nimport unwrapJqueryElement from \"./utils/unwrapJqueryElement.js\";\nimport orderModifiers from \"./utils/orderModifiers.js\";\nimport debounce from \"./utils/debounce.js\";\nimport validateModifiers from \"./utils/validateModifiers.js\";\nvar INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided to Popper, they must be either a valid DOM element, virtual element, or a jQuery-wrapped DOM element.';\nvar INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';\n\nvar areValidElements = function areValidElements() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return !args.some(function (element) {\n    return !(element && typeof element.getBoundingClientRect === 'function');\n  });\n};\n\nvar defaultOptionsValue = {\n  placement: 'bottom',\n  modifiers: [],\n  strategy: 'absolute'\n};\nexport function popperGenerator(generatorOptions) {\n  if (generatorOptions === void 0) {\n    generatorOptions = {};\n  }\n\n  var _generatorOptions = generatorOptions,\n      _generatorOptions$def = _generatorOptions.defaultModifiers,\n      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n      _generatorOptions$def2 = _generatorOptions.defaultOptions,\n      defaultOptions = _generatorOptions$def2 === void 0 ? defaultOptionsValue : _generatorOptions$def2;\n  return function createPopper(reference, popper, options) {\n    if (options === void 0) {\n      options = defaultOptions;\n    } // Unwrap `reference` and `popper` elements in case they are\n    // wrapped by jQuery, otherwise consume them as is\n\n\n    var referenceElement = unwrapJqueryElement(reference);\n    var popperElement = unwrapJqueryElement(popper);\n    var state = {\n      placement: 'bottom',\n      orderedModifiers: [],\n      options: Object.assign({}, defaultOptionsValue, {}, defaultOptions),\n      modifiersData: {},\n      elements: {\n        reference: referenceElement,\n        popper: popperElement\n      },\n      attributes: {},\n      styles: {}\n    };\n    var instance = {\n      setOptions: function setOptions(options) {\n        // Store options into state\n        state.options = Object.assign({}, defaultOptions, {}, options);\n        state.scrollParents = {\n          reference: listScrollParents(referenceElement),\n          popper: listScrollParents(popperElement)\n        }; // Order `options.modifiers` so that the dependencies are fulfilled\n        // once the modifiers are executed\n\n        state.orderedModifiers = orderModifiers([].concat(state.options.modifiers.filter(function (modifier) {\n          return !defaultModifiers.find(function (_ref) {\n            var name = _ref.name;\n            return name === modifier.name;\n          });\n        }), defaultModifiers.map(function (defaultModifier) {\n          return Object.assign({}, defaultModifier, {}, state.options.modifiers.find(function (_ref2) {\n            var name = _ref2.name;\n            return name === defaultModifier.name;\n          }));\n        }))); // Validate the provided modifiers so that the consumer will get warned\n        // if one of the custom modifiers is invalid for any reason\n\n        if (undefined !== \"production\") {\n          validateModifiers(state.orderedModifiers);\n        }\n      },\n      // Syncronous and forcefully executed update\n      // it will always be executed even if not necessary, usually NOT needed\n      // use Popper#update instead\n      forceUpdate: function forceUpdate() {\n        var _state$elements = state.elements,\n            referenceElement = _state$elements.reference,\n            popperElement = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements anymore\n\n        if (!areValidElements(referenceElement, popperElement)) {\n          if (undefined !== \"production\") {\n            console.error(INVALID_ELEMENT_ERROR);\n          }\n\n          return;\n        }\n\n        var isFixed = state.options.strategy === 'fixed'; // Get initial measurements\n        // these are going to be used to compute the initial popper offsets\n        // and as cache for any modifier that needs them later\n\n        state.measures = {\n          reference: getCompositeRect(referenceElement, getCommonOffsetParent(unwrapVirtualElement(referenceElement), popperElement), isFixed),\n          // CSS marginsc an be applied to popper elements to quickly\n          // apply offsets dynamically based on some CSS selectors.\n          // For this reason we include margins in this calculation.\n          popper: addClientRectMargins(getLayoutRect(popperElement), popperElement)\n        }; // Modifiers have the ability to read the current Popper state, included\n        // the popper offsets, and modify it to address specifc cases\n\n        state.reset = false; // Cache the placement in cache to make it available to the modifiers\n        // modifiers will modify this one (rather than the one in options)\n\n        var prevPlacement = state.placement;\n        state.placement = state.options.placement;\n        state.orderedModifiers.forEach(function (modifier) {\n          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n        });\n        var __debug_loops__ = 0;\n\n        for (var index = 0; index < state.orderedModifiers.length; index++) {\n          if (undefined !== \"production\") {\n            __debug_loops__ += 1;\n\n            if (__debug_loops__ > 100) {\n              console.error(INFINITE_LOOP_ERROR);\n              break;\n            }\n          }\n\n          if (state.reset === true) {\n            state.reset = false;\n            index = -1;\n            continue;\n          }\n\n          var _state$orderedModifie = state.orderedModifiers[index],\n              fn = _state$orderedModifie.fn,\n              enabled = _state$orderedModifie.enabled,\n              _state$orderedModifie2 = _state$orderedModifie.options,\n              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n              name = _state$orderedModifie.name;\n\n          if (enabled && typeof fn === 'function') {\n            state = fn({\n              state: state,\n              options: _options,\n              name: name,\n              instance: instance\n            });\n          }\n        } // Prevents a jitter if elements' size changes based on placement.\n        // This is separate from and does not solve the \"flip flicker\" issue.\n        // We can't know ahead of time (before the placement gets written to the\n        // DOM) what size the element will be due to conditionally applied/\n        // computed CSS based on placement (e.g. margins on arrow)\n\n\n        if (prevPlacement !== state.placement) {\n          instance.forceUpdate();\n        }\n      },\n      // Async and optimistically optimized update\n      // it will not be executed if not necessary\n      // debounced, so that it only runs at most once-per-tick\n      update: debounce(function () {\n        return (// prettier-ignore\n          new Promise(function (resolve) {\n            instance.forceUpdate();\n            resolve(state);\n          })\n        );\n      }),\n      destroy: function destroy() {\n        // Run `onDestroy` modifier methods\n        state.orderedModifiers.forEach(function (_ref3) {\n          var onDestroy = _ref3.onDestroy,\n              enabled = _ref3.enabled,\n              name = _ref3.name,\n              _ref3$options = _ref3.options,\n              options = _ref3$options === void 0 ? {} : _ref3$options;\n          return enabled && onDestroy && onDestroy({\n            state: state,\n            name: name,\n            instance: instance,\n            options: options\n          });\n        });\n      }\n    }; // Don't proceed if `reference` or `popper` are invalid elements\n\n    if (!areValidElements(referenceElement, popperElement)) {\n      if (undefined !== \"production\") {\n        console.error(INVALID_ELEMENT_ERROR);\n      }\n\n      return instance;\n    }\n\n    instance.setOptions(options); // Modifiers have the opportunity to execute some arbitrary code before\n    // the first update cycle is ran, the order of execution will be the same\n    // defined by the modifier dependencies directive.\n    // The `onLoad` function may add or alter the options of themselves\n\n    state.orderedModifiers.forEach(function (_ref4) {\n      var onLoad = _ref4.onLoad,\n          enabled = _ref4.enabled,\n          name = _ref4.name,\n          _ref4$options = _ref4.options,\n          options = _ref4$options === void 0 ? {} : _ref4$options;\n      return enabled && onLoad && (state = onLoad({\n        state: state,\n        name: name,\n        instance: instance,\n        options: options\n      }) || state);\n    });\n    instance.update();\n    return instance;\n  };\n}\nexport var createPopper = popperGenerator();","map":null,"metadata":{},"sourceType":"module"}