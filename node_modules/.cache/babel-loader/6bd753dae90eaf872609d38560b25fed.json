{"ast":null,"code":"import getOffsetParent from \"./getOffsetParent.js\";\nimport { isElement, isShadowRoot } from \"./instanceOf.js\";\nimport getWindow from \"./getWindow.js\";\n\nfunction isOffsetContainer(element) {\n  var firstElementChild = element.firstElementChild;\n  return !firstElementChild || getOffsetParent(firstElementChild) === element;\n}\n\nfunction getRoot(node) {\n  var parentNode = node.parentNode;\n\n  if (parentNode != null) {\n    return getRoot(parentNode);\n  }\n\n  return node;\n}\n\nexport default function getCommonOffsetParent(element1, element2) {\n  // If one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  var element2root = getRoot(element2);\n\n  if (isShadowRoot(element1root)) {\n    return getCommonOffsetParent(element1root.host, element2);\n  } else if (isShadowRoot(element2root)) {\n    return getCommonOffsetParent(element1, element2root.host);\n  } // Here we make sure to give as \"start\" the element that comes first in the DOM\n\n\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1; // Both nodes are inside #document\n  // Get common ancestor container\n\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer; // If ancestor container is not an element, we must return a safe\n  // fallback, body is a good bet\n\n  if (!isElement(commonAncestorContainer)) {\n    return getWindow(commonAncestorContainer).body;\n  } // if ancestor container is also an offset container, we found our winner\n\n\n  if (isOffsetContainer(commonAncestorContainer)) {\n    return commonAncestorContainer;\n  }\n\n  return getOffsetParent(commonAncestorContainer);\n}","map":null,"metadata":{},"sourceType":"module"}